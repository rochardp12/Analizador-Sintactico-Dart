
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADMIRATION AND ARROWFUNCTION AS BOOL BREAK CASE CATCH CHAINCHAR CLASS COMMA CONST DATAATTRIBUTE DEF DEFAULT DIVIDE DOLLAR DOT DOTCOMMA DOUBLE DQUOTES DYNAMIC ELIF ELSE ENUM EQUALS EXTENDS FALSE FINAL FINALLY FLOAT FOR FUNCTION IF IN INT INTEGERDIVISION INTERFACE INTERNDATATYPE IS LANGLE LBRACE LBRACKET LIST LPAREN MAIN MAP METHOD MINUS MOD MODULE NEQ NEW NEWDATATYPE NULL NUMBER NUMBERINT OR PLUS PRINT PRIVATE PROTECTED PUBLIC RANGLE RBRACE RBRACKET RETURN RPAREN SET STATIC STRING SUPER SWITCH THIS TIMES TRUE TRY TWODOTS TYPEDEF VAR VARIABLE VOID WHILE commentBlock commentLinecuerpo : expresion\n              | impresion \n              | tupla\n              | declaracion\n              | sentenciaIfElse\n              | estructuraList\n              | funcionVoidexpresion : valor operador valordeclaracion : VARIABLE EQUALS valor\n                   | VARIABLE EQUALS tuplaimpresion : PRINT LPAREN valores RPAREN DOTCOMMA\n                 | PRINT LPAREN expresion RPAREN DOTCOMMA\n                 | PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA\n                 | PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA\n     sentenciaIfElse : IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA\n                        | IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA\n    estructuraList : LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMAfuncionVoid : VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMAcondicion : valor operadorComp valoroperadorComp : EQUALS \n                    | LANGLE\n                    | RANGLE\n                    | NEQtupla : LPAREN valores RPARENimpresion : PRINT LPAREN RPAREN DOTCOMMA\n    impresion : valores : valor\n               | valor COMMA valoresoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n    valor : VARIABLE\n             | INT\n             | FLOAT\n             | BOOL\n             | expresion\n             | NUMBER\n    type : INT\n             | STRING\n             | BOOL\n    '
    
_lr_action_items = {'PRINT':([0,69,77,87,],[10,10,10,10,]),'$end':([0,1,2,3,4,5,6,7,8,16,17,18,19,28,29,34,39,41,42,51,65,66,78,79,84,89,91,93,],[-26,0,-1,-2,-3,-4,-5,-6,-7,-34,-35,-36,-38,-33,-37,-8,-24,-9,-10,-25,-11,-12,-13,-14,-16,-18,-17,-15,]),'LPAREN':([0,10,13,30,33,69,77,87,],[11,25,31,11,49,11,11,11,]),'VARIABLE':([0,11,15,20,21,22,23,24,25,30,31,38,40,49,58,59,60,61,62,63,69,77,81,87,],[12,28,33,28,-29,-30,-31,-32,28,28,28,28,28,28,28,-20,-21,-22,-23,71,12,12,28,12,]),'IF':([0,69,77,87,],[13,13,13,13,]),'LIST':([0,69,77,87,],[14,14,14,14,]),'VOID':([0,69,77,87,],[15,15,15,15,]),'INT':([0,11,20,21,22,23,24,25,30,31,32,38,40,49,58,59,60,61,62,69,77,81,87,],[16,16,16,-29,-30,-31,-32,16,16,16,46,16,16,16,16,-20,-21,-22,-23,16,16,16,16,]),'FLOAT':([0,11,20,21,22,23,24,25,30,31,38,40,49,58,59,60,61,62,69,77,81,87,],[17,17,17,-29,-30,-31,-32,17,17,17,17,17,17,17,-20,-21,-22,-23,17,17,17,17,]),'BOOL':([0,11,20,21,22,23,24,25,30,31,32,38,40,49,58,59,60,61,62,69,77,81,87,],[18,18,18,-29,-30,-31,-32,18,18,18,48,18,18,18,18,-20,-21,-22,-23,18,18,18,18,]),'NUMBER':([0,11,20,21,22,23,24,25,30,31,38,40,49,58,59,60,61,62,69,77,81,87,],[19,19,19,-29,-30,-31,-32,19,19,19,19,19,19,19,-20,-21,-22,-23,19,19,19,19,]),'RBRACE':([2,3,4,5,6,7,8,16,17,18,19,28,29,34,39,41,42,51,65,66,69,75,77,78,79,82,84,87,89,90,91,93,],[-1,-2,-3,-4,-5,-6,-7,-34,-35,-36,-38,-33,-37,-8,-24,-9,-10,-25,-11,-12,-26,80,-26,-13,-14,86,-16,-26,-18,92,-17,-15,]),'PLUS':([2,9,12,16,17,18,19,27,28,29,34,37,41,44,53,55,70,],[-37,21,-33,-34,-35,-36,-38,21,-33,-37,21,-37,21,21,-37,21,21,]),'MINUS':([2,9,12,16,17,18,19,27,28,29,34,37,41,44,53,55,70,],[-37,22,-33,-34,-35,-36,-38,22,-33,-37,22,-37,22,22,-37,22,22,]),'TIMES':([2,9,12,16,17,18,19,27,28,29,34,37,41,44,53,55,70,],[-37,23,-33,-34,-35,-36,-38,23,-33,-37,23,-37,23,23,-37,23,23,]),'DIVIDE':([2,9,12,16,17,18,19,27,28,29,34,37,41,44,53,55,70,],[-37,24,-33,-34,-35,-36,-38,24,-33,-37,24,-37,24,24,-37,24,24,]),'EQUALS':([12,16,17,18,19,28,29,34,44,71,],[30,-34,-35,-36,-38,-33,-37,-8,59,76,]),'LANGLE':([14,16,17,18,19,28,29,34,44,],[32,-34,-35,-36,-38,-33,-37,-8,60,]),'COMMA':([16,17,18,19,27,28,29,34,37,53,55,],[-34,-35,-36,-38,40,-33,-37,-8,-37,-37,40,]),'RPAREN':([16,17,18,19,25,26,27,28,29,34,35,37,43,56,64,67,68,70,],[-34,-35,-36,-38,36,39,-27,-33,-37,-8,50,52,57,-28,72,73,74,-19,]),'RANGLE':([16,17,18,19,28,29,34,44,45,46,47,48,],[-34,-35,-36,-38,-33,-37,-8,61,63,-39,-40,-41,]),'NEQ':([16,17,18,19,28,29,34,44,],[-34,-35,-36,-38,-33,-37,-8,62,]),'DQUOTES':([16,17,18,19,25,27,28,29,34,53,54,55,56,],[-34,-35,-36,-38,38,-27,-33,-37,-8,67,68,-27,-28,]),'RBRACKET':([16,17,18,19,27,28,29,34,56,85,],[-34,-35,-36,-38,-27,-33,-37,-8,-28,88,]),'STRING':([32,],[47,]),'DOTCOMMA':([36,50,52,73,74,80,86,88,92,],[51,65,66,78,79,84,89,91,93,]),'LBRACE':([57,72,83,],[69,77,87,]),'LBRACKET':([76,],[81,]),'ELSE':([80,],[83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,69,77,87,],[1,75,82,90,]),'expresion':([0,11,20,25,30,31,38,40,49,58,69,77,81,87,],[2,29,29,37,29,29,53,29,29,29,2,2,29,2,]),'impresion':([0,69,77,87,],[3,3,3,3,]),'tupla':([0,30,69,77,87,],[4,42,4,4,4,]),'declaracion':([0,69,77,87,],[5,5,5,5,]),'sentenciaIfElse':([0,69,77,87,],[6,6,6,6,]),'estructuraList':([0,69,77,87,],[7,7,7,7,]),'funcionVoid':([0,69,77,87,],[8,8,8,8,]),'valor':([0,11,20,25,30,31,38,40,49,58,69,77,81,87,],[9,27,34,27,41,44,55,27,27,70,9,9,27,9,]),'operador':([9,27,34,41,44,55,70,],[20,20,20,20,20,20,20,]),'valores':([11,25,38,40,49,81,],[26,35,54,56,64,85,]),'condicion':([31,],[43,]),'type':([32,],[45,]),'operadorComp':([44,],[58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expresion','cuerpo',1,'p_cuerpo','main.py',25),
  ('cuerpo -> impresion','cuerpo',1,'p_cuerpo','main.py',26),
  ('cuerpo -> tupla','cuerpo',1,'p_cuerpo','main.py',27),
  ('cuerpo -> declaracion','cuerpo',1,'p_cuerpo','main.py',28),
  ('cuerpo -> sentenciaIfElse','cuerpo',1,'p_cuerpo','main.py',29),
  ('cuerpo -> estructuraList','cuerpo',1,'p_cuerpo','main.py',30),
  ('cuerpo -> funcionVoid','cuerpo',1,'p_cuerpo','main.py',31),
  ('expresion -> valor operador valor','expresion',3,'p_expresion','main.py',34),
  ('declaracion -> VARIABLE EQUALS valor','declaracion',3,'p_declaracion','main.py',37),
  ('declaracion -> VARIABLE EQUALS tupla','declaracion',3,'p_declaracion','main.py',38),
  ('impresion -> PRINT LPAREN valores RPAREN DOTCOMMA','impresion',5,'p_impresion','main.py',41),
  ('impresion -> PRINT LPAREN expresion RPAREN DOTCOMMA','impresion',5,'p_impresion','main.py',42),
  ('impresion -> PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA','impresion',7,'p_impresion','main.py',43),
  ('impresion -> PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA','impresion',7,'p_impresion','main.py',44),
  ('sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA','sentenciaIfElse',12,'p_sentenciaIfElse','main.py',49),
  ('sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA','sentenciaIfElse',8,'p_sentenciaIfElse','main.py',50),
  ('estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA','estructuraList',10,'p_estructuraList','main.py',54),
  ('funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA','funcionVoid',9,'p_funcionVoid','main.py',58),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','main.py',61),
  ('operadorComp -> EQUALS','operadorComp',1,'p_operadorComp','main.py',64),
  ('operadorComp -> LANGLE','operadorComp',1,'p_operadorComp','main.py',65),
  ('operadorComp -> RANGLE','operadorComp',1,'p_operadorComp','main.py',66),
  ('operadorComp -> NEQ','operadorComp',1,'p_operadorComp','main.py',67),
  ('tupla -> LPAREN valores RPAREN','tupla',3,'p_tupla','main.py',70),
  ('impresion -> PRINT LPAREN RPAREN DOTCOMMA','impresion',4,'p_impresion_vacia','main.py',73),
  ('impresion -> <empty>','impresion',0,'p_impresion_varias','main.py',76),
  ('valores -> valor','valores',1,'p_valores','main.py',79),
  ('valores -> valor COMMA valores','valores',3,'p_valores','main.py',80),
  ('operador -> PLUS','operador',1,'p_operador','main.py',83),
  ('operador -> MINUS','operador',1,'p_operador','main.py',84),
  ('operador -> TIMES','operador',1,'p_operador','main.py',85),
  ('operador -> DIVIDE','operador',1,'p_operador','main.py',86),
  ('valor -> VARIABLE','valor',1,'p_valor','main.py',90),
  ('valor -> INT','valor',1,'p_valor','main.py',91),
  ('valor -> FLOAT','valor',1,'p_valor','main.py',92),
  ('valor -> BOOL','valor',1,'p_valor','main.py',93),
  ('valor -> expresion','valor',1,'p_valor','main.py',94),
  ('valor -> NUMBER','valor',1,'p_valor','main.py',95),
  ('type -> INT','type',1,'p_type','main.py',98),
  ('type -> STRING','type',1,'p_type','main.py',99),
  ('type -> BOOL','type',1,'p_type','main.py',100),
]
