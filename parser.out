Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADMIRATION
    AND
    ARROWFUNCTION
    AS
    BREAK
    CASE
    CATCH
    CHAINCHAR
    CLASS
    CONST
    DATAATTRIBUTE
    DEF
    DEFAULT
    DOLLAR
    DOT
    DOUBLE
    DYNAMIC
    ELIF
    ENUM
    EXTENDS
    FALSE
    FINAL
    FINALLY
    FOR
    FUNCTION
    IN
    INTEGERDIVISION
    INTERFACE
    INTERNDATATYPE
    IS
    MAIN
    MAP
    METHOD
    MOD
    MODULE
    NEW
    NEWDATATYPE
    NULL
    NUMBERINT
    OR
    PRIVATE
    PROTECTED
    PUBLIC
    RETURN
    SET
    STATIC
    SUPER
    SWITCH
    THIS
    TRUE
    TRY
    TWODOTS
    TYPEDEF
    VAR
    WHILE
    commentBlock
    commentLine

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> expresion
Rule 2     cuerpo -> impresion
Rule 3     cuerpo -> tupla
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> sentenciaIfElse
Rule 6     cuerpo -> estructuraList
Rule 7     cuerpo -> funcionVoid
Rule 8     expresion -> valor operador valor
Rule 9     declaracion -> VARIABLE EQUALS valor
Rule 10    declaracion -> VARIABLE EQUALS tupla
Rule 11    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 12    impresion -> PRINT LPAREN expresion RPAREN DOTCOMMA
Rule 13    impresion -> PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA
Rule 14    impresion -> PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA
Rule 15    sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
Rule 16    sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA
Rule 17    estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
Rule 18    funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA
Rule 19    condicion -> valor operadorComp valor
Rule 20    operadorComp -> EQUALS
Rule 21    operadorComp -> LANGLE
Rule 22    operadorComp -> RANGLE
Rule 23    operadorComp -> NEQ
Rule 24    tupla -> LPAREN valores RPAREN
Rule 25    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 26    impresion -> <empty>
Rule 27    valores -> valor
Rule 28    valores -> valor COMMA valores
Rule 29    operador -> PLUS
Rule 30    operador -> MINUS
Rule 31    operador -> TIMES
Rule 32    operador -> DIVIDE
Rule 33    valor -> VARIABLE
Rule 34    valor -> INT
Rule 35    valor -> FLOAT
Rule 36    valor -> BOOL
Rule 37    valor -> expresion
Rule 38    valor -> NUMBER
Rule 39    type -> INT
Rule 40    type -> STRING
Rule 41    type -> BOOL

Terminals, with rules where they appear

ABSTRACT             : 
ADMIRATION           : 
AND                  : 
ARROWFUNCTION        : 
AS                   : 
BOOL                 : 36 41
BREAK                : 
CASE                 : 
CATCH                : 
CHAINCHAR            : 
CLASS                : 
COMMA                : 28
CONST                : 
DATAATTRIBUTE        : 
DEF                  : 
DEFAULT              : 
DIVIDE               : 32
DOLLAR               : 
DOT                  : 
DOTCOMMA             : 11 12 13 14 15 16 17 18 25
DOUBLE               : 
DQUOTES              : 13 13 14 14
DYNAMIC              : 
ELIF                 : 
ELSE                 : 15
ENUM                 : 
EQUALS               : 9 10 17 20
EXTENDS              : 
FALSE                : 
FINAL                : 
FINALLY              : 
FLOAT                : 35
FOR                  : 
FUNCTION             : 
IF                   : 15 16
IN                   : 
INT                  : 34 39
INTEGERDIVISION      : 
INTERFACE            : 
INTERNDATATYPE       : 
IS                   : 
LANGLE               : 17 21
LBRACE               : 15 15 16 18
LBRACKET             : 17
LIST                 : 17
LPAREN               : 11 12 13 14 15 16 18 24 25
MAIN                 : 
MAP                  : 
METHOD               : 
MINUS                : 30
MOD                  : 
MODULE               : 
NEQ                  : 23
NEW                  : 
NEWDATATYPE          : 
NULL                 : 
NUMBER               : 38
NUMBERINT            : 
OR                   : 
PLUS                 : 29
PRINT                : 11 12 13 14 25
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RANGLE               : 17 22
RBRACE               : 15 15 16 18
RBRACKET             : 17
RETURN               : 
RPAREN               : 11 12 13 14 15 16 18 24 25
SET                  : 
STATIC               : 
STRING               : 40
SUPER                : 
SWITCH               : 
THIS                 : 
TIMES                : 31
TRUE                 : 
TRY                  : 
TWODOTS              : 
TYPEDEF              : 
VAR                  : 
VARIABLE             : 9 10 17 18 33
VOID                 : 18
WHILE                : 
commentBlock         : 
commentLine          : 
error                : 

Nonterminals, with rules where they appear

condicion            : 15 16
cuerpo               : 15 15 16 18 0
declaracion          : 4
estructuraList       : 6
expresion            : 1 12 13 37
funcionVoid          : 7
impresion            : 2
operador             : 8
operadorComp         : 19
sentenciaIfElse      : 5
tupla                : 3 10
type                 : 17
valor                : 8 8 9 19 19 27 28
valores              : 11 14 17 18 24 28

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . expresion
    (2) cuerpo -> . impresion
    (3) cuerpo -> . tupla
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . sentenciaIfElse
    (6) cuerpo -> . estructuraList
    (7) cuerpo -> . funcionVoid
    (8) expresion -> . valor operador valor
    (11) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (12) impresion -> . PRINT LPAREN expresion RPAREN DOTCOMMA
    (13) impresion -> . PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> . PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (26) impresion -> .
    (24) tupla -> . LPAREN valores RPAREN
    (9) declaracion -> . VARIABLE EQUALS valor
    (10) declaracion -> . VARIABLE EQUALS tupla
    (15) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (17) estructuraList -> . LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (18) funcionVoid -> . VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER

    PRINT           shift and go to state 10
    $end            reduce using rule 26 (impresion -> .)
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    IF              shift and go to state 13
    LIST            shift and go to state 14
    VOID            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    cuerpo                         shift and go to state 1
    expresion                      shift and go to state 2
    impresion                      shift and go to state 3
    tupla                          shift and go to state 4
    declaracion                    shift and go to state 5
    sentenciaIfElse                shift and go to state 6
    estructuraList                 shift and go to state 7
    funcionVoid                    shift and go to state 8
    valor                          shift and go to state 9

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> expresion .
    (37) valor -> expresion .

    $end            reduce using rule 1 (cuerpo -> expresion .)
    RBRACE          reduce using rule 1 (cuerpo -> expresion .)
    PLUS            reduce using rule 37 (valor -> expresion .)
    MINUS           reduce using rule 37 (valor -> expresion .)
    TIMES           reduce using rule 37 (valor -> expresion .)
    DIVIDE          reduce using rule 37 (valor -> expresion .)


state 3

    (2) cuerpo -> impresion .

    $end            reduce using rule 2 (cuerpo -> impresion .)
    RBRACE          reduce using rule 2 (cuerpo -> impresion .)


state 4

    (3) cuerpo -> tupla .

    $end            reduce using rule 3 (cuerpo -> tupla .)
    RBRACE          reduce using rule 3 (cuerpo -> tupla .)


state 5

    (4) cuerpo -> declaracion .

    $end            reduce using rule 4 (cuerpo -> declaracion .)
    RBRACE          reduce using rule 4 (cuerpo -> declaracion .)


state 6

    (5) cuerpo -> sentenciaIfElse .

    $end            reduce using rule 5 (cuerpo -> sentenciaIfElse .)
    RBRACE          reduce using rule 5 (cuerpo -> sentenciaIfElse .)


state 7

    (6) cuerpo -> estructuraList .

    $end            reduce using rule 6 (cuerpo -> estructuraList .)
    RBRACE          reduce using rule 6 (cuerpo -> estructuraList .)


state 8

    (7) cuerpo -> funcionVoid .

    $end            reduce using rule 7 (cuerpo -> funcionVoid .)
    RBRACE          reduce using rule 7 (cuerpo -> funcionVoid .)


state 9

    (8) expresion -> valor . operador valor
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

    operador                       shift and go to state 20

state 10

    (11) impresion -> PRINT . LPAREN valores RPAREN DOTCOMMA
    (12) impresion -> PRINT . LPAREN expresion RPAREN DOTCOMMA
    (13) impresion -> PRINT . LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> PRINT . LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA
    (25) impresion -> PRINT . LPAREN RPAREN DOTCOMMA

    LPAREN          shift and go to state 25


state 11

    (24) tupla -> LPAREN . valores RPAREN
    (27) valores -> . valor
    (28) valores -> . valor COMMA valores
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valores                        shift and go to state 26
    valor                          shift and go to state 27
    expresion                      shift and go to state 29

state 12

    (9) declaracion -> VARIABLE . EQUALS valor
    (10) declaracion -> VARIABLE . EQUALS tupla
    (33) valor -> VARIABLE .

    EQUALS          shift and go to state 30
    PLUS            reduce using rule 33 (valor -> VARIABLE .)
    MINUS           reduce using rule 33 (valor -> VARIABLE .)
    TIMES           reduce using rule 33 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 33 (valor -> VARIABLE .)


state 13

    (15) sentenciaIfElse -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA

    LPAREN          shift and go to state 31


state 14

    (17) estructuraList -> LIST . LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    LANGLE          shift and go to state 32


state 15

    (18) funcionVoid -> VOID . VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA

    VARIABLE        shift and go to state 33


state 16

    (34) valor -> INT .

    PLUS            reduce using rule 34 (valor -> INT .)
    MINUS           reduce using rule 34 (valor -> INT .)
    TIMES           reduce using rule 34 (valor -> INT .)
    DIVIDE          reduce using rule 34 (valor -> INT .)
    COMMA           reduce using rule 34 (valor -> INT .)
    RPAREN          reduce using rule 34 (valor -> INT .)
    $end            reduce using rule 34 (valor -> INT .)
    RBRACE          reduce using rule 34 (valor -> INT .)
    EQUALS          reduce using rule 34 (valor -> INT .)
    LANGLE          reduce using rule 34 (valor -> INT .)
    RANGLE          reduce using rule 34 (valor -> INT .)
    NEQ             reduce using rule 34 (valor -> INT .)
    DQUOTES         reduce using rule 34 (valor -> INT .)
    RBRACKET        reduce using rule 34 (valor -> INT .)


state 17

    (35) valor -> FLOAT .

    PLUS            reduce using rule 35 (valor -> FLOAT .)
    MINUS           reduce using rule 35 (valor -> FLOAT .)
    TIMES           reduce using rule 35 (valor -> FLOAT .)
    DIVIDE          reduce using rule 35 (valor -> FLOAT .)
    COMMA           reduce using rule 35 (valor -> FLOAT .)
    RPAREN          reduce using rule 35 (valor -> FLOAT .)
    $end            reduce using rule 35 (valor -> FLOAT .)
    RBRACE          reduce using rule 35 (valor -> FLOAT .)
    EQUALS          reduce using rule 35 (valor -> FLOAT .)
    LANGLE          reduce using rule 35 (valor -> FLOAT .)
    RANGLE          reduce using rule 35 (valor -> FLOAT .)
    NEQ             reduce using rule 35 (valor -> FLOAT .)
    DQUOTES         reduce using rule 35 (valor -> FLOAT .)
    RBRACKET        reduce using rule 35 (valor -> FLOAT .)


state 18

    (36) valor -> BOOL .

    PLUS            reduce using rule 36 (valor -> BOOL .)
    MINUS           reduce using rule 36 (valor -> BOOL .)
    TIMES           reduce using rule 36 (valor -> BOOL .)
    DIVIDE          reduce using rule 36 (valor -> BOOL .)
    COMMA           reduce using rule 36 (valor -> BOOL .)
    RPAREN          reduce using rule 36 (valor -> BOOL .)
    $end            reduce using rule 36 (valor -> BOOL .)
    RBRACE          reduce using rule 36 (valor -> BOOL .)
    EQUALS          reduce using rule 36 (valor -> BOOL .)
    LANGLE          reduce using rule 36 (valor -> BOOL .)
    RANGLE          reduce using rule 36 (valor -> BOOL .)
    NEQ             reduce using rule 36 (valor -> BOOL .)
    DQUOTES         reduce using rule 36 (valor -> BOOL .)
    RBRACKET        reduce using rule 36 (valor -> BOOL .)


state 19

    (38) valor -> NUMBER .

    PLUS            reduce using rule 38 (valor -> NUMBER .)
    MINUS           reduce using rule 38 (valor -> NUMBER .)
    TIMES           reduce using rule 38 (valor -> NUMBER .)
    DIVIDE          reduce using rule 38 (valor -> NUMBER .)
    COMMA           reduce using rule 38 (valor -> NUMBER .)
    RPAREN          reduce using rule 38 (valor -> NUMBER .)
    $end            reduce using rule 38 (valor -> NUMBER .)
    RBRACE          reduce using rule 38 (valor -> NUMBER .)
    EQUALS          reduce using rule 38 (valor -> NUMBER .)
    LANGLE          reduce using rule 38 (valor -> NUMBER .)
    RANGLE          reduce using rule 38 (valor -> NUMBER .)
    NEQ             reduce using rule 38 (valor -> NUMBER .)
    DQUOTES         reduce using rule 38 (valor -> NUMBER .)
    RBRACKET        reduce using rule 38 (valor -> NUMBER .)


state 20

    (8) expresion -> valor operador . valor
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valor                          shift and go to state 34
    expresion                      shift and go to state 29

state 21

    (29) operador -> PLUS .

    VARIABLE        reduce using rule 29 (operador -> PLUS .)
    INT             reduce using rule 29 (operador -> PLUS .)
    FLOAT           reduce using rule 29 (operador -> PLUS .)
    BOOL            reduce using rule 29 (operador -> PLUS .)
    NUMBER          reduce using rule 29 (operador -> PLUS .)


state 22

    (30) operador -> MINUS .

    VARIABLE        reduce using rule 30 (operador -> MINUS .)
    INT             reduce using rule 30 (operador -> MINUS .)
    FLOAT           reduce using rule 30 (operador -> MINUS .)
    BOOL            reduce using rule 30 (operador -> MINUS .)
    NUMBER          reduce using rule 30 (operador -> MINUS .)


state 23

    (31) operador -> TIMES .

    VARIABLE        reduce using rule 31 (operador -> TIMES .)
    INT             reduce using rule 31 (operador -> TIMES .)
    FLOAT           reduce using rule 31 (operador -> TIMES .)
    BOOL            reduce using rule 31 (operador -> TIMES .)
    NUMBER          reduce using rule 31 (operador -> TIMES .)


state 24

    (32) operador -> DIVIDE .

    VARIABLE        reduce using rule 32 (operador -> DIVIDE .)
    INT             reduce using rule 32 (operador -> DIVIDE .)
    FLOAT           reduce using rule 32 (operador -> DIVIDE .)
    BOOL            reduce using rule 32 (operador -> DIVIDE .)
    NUMBER          reduce using rule 32 (operador -> DIVIDE .)


state 25

    (11) impresion -> PRINT LPAREN . valores RPAREN DOTCOMMA
    (12) impresion -> PRINT LPAREN . expresion RPAREN DOTCOMMA
    (13) impresion -> PRINT LPAREN . DQUOTES expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> PRINT LPAREN . DQUOTES valores DQUOTES RPAREN DOTCOMMA
    (25) impresion -> PRINT LPAREN . RPAREN DOTCOMMA
    (27) valores -> . valor
    (28) valores -> . valor COMMA valores
    (8) expresion -> . valor operador valor
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER

    DQUOTES         shift and go to state 38
    RPAREN          shift and go to state 36
    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valores                        shift and go to state 35
    expresion                      shift and go to state 37
    valor                          shift and go to state 27

state 26

    (24) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 39


state 27

    (27) valores -> valor .
    (28) valores -> valor . COMMA valores
    (8) expresion -> valor . operador valor
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

    RPAREN          reduce using rule 27 (valores -> valor .)
    DQUOTES         reduce using rule 27 (valores -> valor .)
    RBRACKET        reduce using rule 27 (valores -> valor .)
    COMMA           shift and go to state 40
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

    operador                       shift and go to state 20

state 28

    (33) valor -> VARIABLE .

    COMMA           reduce using rule 33 (valor -> VARIABLE .)
    PLUS            reduce using rule 33 (valor -> VARIABLE .)
    MINUS           reduce using rule 33 (valor -> VARIABLE .)
    TIMES           reduce using rule 33 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 33 (valor -> VARIABLE .)
    RPAREN          reduce using rule 33 (valor -> VARIABLE .)
    $end            reduce using rule 33 (valor -> VARIABLE .)
    RBRACE          reduce using rule 33 (valor -> VARIABLE .)
    EQUALS          reduce using rule 33 (valor -> VARIABLE .)
    LANGLE          reduce using rule 33 (valor -> VARIABLE .)
    RANGLE          reduce using rule 33 (valor -> VARIABLE .)
    NEQ             reduce using rule 33 (valor -> VARIABLE .)
    DQUOTES         reduce using rule 33 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 33 (valor -> VARIABLE .)


state 29

    (37) valor -> expresion .

    COMMA           reduce using rule 37 (valor -> expresion .)
    PLUS            reduce using rule 37 (valor -> expresion .)
    MINUS           reduce using rule 37 (valor -> expresion .)
    TIMES           reduce using rule 37 (valor -> expresion .)
    DIVIDE          reduce using rule 37 (valor -> expresion .)
    RPAREN          reduce using rule 37 (valor -> expresion .)
    $end            reduce using rule 37 (valor -> expresion .)
    RBRACE          reduce using rule 37 (valor -> expresion .)
    EQUALS          reduce using rule 37 (valor -> expresion .)
    LANGLE          reduce using rule 37 (valor -> expresion .)
    RANGLE          reduce using rule 37 (valor -> expresion .)
    NEQ             reduce using rule 37 (valor -> expresion .)
    DQUOTES         reduce using rule 37 (valor -> expresion .)
    RBRACKET        reduce using rule 37 (valor -> expresion .)


state 30

    (9) declaracion -> VARIABLE EQUALS . valor
    (10) declaracion -> VARIABLE EQUALS . tupla
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (24) tupla -> . LPAREN valores RPAREN
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19
    LPAREN          shift and go to state 11

    valor                          shift and go to state 41
    tupla                          shift and go to state 42
    expresion                      shift and go to state 29

state 31

    (15) sentenciaIfElse -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (19) condicion -> . valor operadorComp valor
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    condicion                      shift and go to state 43
    valor                          shift and go to state 44
    expresion                      shift and go to state 29

state 32

    (17) estructuraList -> LIST LANGLE . type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (39) type -> . INT
    (40) type -> . STRING
    (41) type -> . BOOL

    INT             shift and go to state 46
    STRING          shift and go to state 47
    BOOL            shift and go to state 48

    type                           shift and go to state 45

state 33

    (18) funcionVoid -> VOID VARIABLE . LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA

    LPAREN          shift and go to state 49


state 34

    (8) expresion -> valor operador valor .
    (8) expresion -> valor . operador valor
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 8 (expresion -> valor operador valor .)
    COMMA           reduce using rule 8 (expresion -> valor operador valor .)
    RPAREN          reduce using rule 8 (expresion -> valor operador valor .)
    RBRACE          reduce using rule 8 (expresion -> valor operador valor .)
    EQUALS          reduce using rule 8 (expresion -> valor operador valor .)
    LANGLE          reduce using rule 8 (expresion -> valor operador valor .)
    RANGLE          reduce using rule 8 (expresion -> valor operador valor .)
    NEQ             reduce using rule 8 (expresion -> valor operador valor .)
    DQUOTES         reduce using rule 8 (expresion -> valor operador valor .)
    RBRACKET        reduce using rule 8 (expresion -> valor operador valor .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! PLUS            [ reduce using rule 8 (expresion -> valor operador valor .) ]
  ! MINUS           [ reduce using rule 8 (expresion -> valor operador valor .) ]
  ! TIMES           [ reduce using rule 8 (expresion -> valor operador valor .) ]
  ! DIVIDE          [ reduce using rule 8 (expresion -> valor operador valor .) ]

    operador                       shift and go to state 20

state 35

    (11) impresion -> PRINT LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 50


state 36

    (25) impresion -> PRINT LPAREN RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 51


state 37

    (12) impresion -> PRINT LPAREN expresion . RPAREN DOTCOMMA
    (37) valor -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 52
    COMMA           reduce using rule 37 (valor -> expresion .)
    PLUS            reduce using rule 37 (valor -> expresion .)
    MINUS           reduce using rule 37 (valor -> expresion .)
    TIMES           reduce using rule 37 (valor -> expresion .)
    DIVIDE          reduce using rule 37 (valor -> expresion .)

  ! RPAREN          [ reduce using rule 37 (valor -> expresion .) ]


state 38

    (13) impresion -> PRINT LPAREN DQUOTES . expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> PRINT LPAREN DQUOTES . valores DQUOTES RPAREN DOTCOMMA
    (8) expresion -> . valor operador valor
    (27) valores -> . valor
    (28) valores -> . valor COMMA valores
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    expresion                      shift and go to state 53
    valores                        shift and go to state 54
    valor                          shift and go to state 55

state 39

    (24) tupla -> LPAREN valores RPAREN .

    $end            reduce using rule 24 (tupla -> LPAREN valores RPAREN .)
    RBRACE          reduce using rule 24 (tupla -> LPAREN valores RPAREN .)


state 40

    (28) valores -> valor COMMA . valores
    (27) valores -> . valor
    (28) valores -> . valor COMMA valores
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valor                          shift and go to state 27
    valores                        shift and go to state 56
    expresion                      shift and go to state 29

state 41

    (9) declaracion -> VARIABLE EQUALS valor .
    (8) expresion -> valor . operador valor
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

    $end            reduce using rule 9 (declaracion -> VARIABLE EQUALS valor .)
    RBRACE          reduce using rule 9 (declaracion -> VARIABLE EQUALS valor .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

    operador                       shift and go to state 20

state 42

    (10) declaracion -> VARIABLE EQUALS tupla .

    $end            reduce using rule 10 (declaracion -> VARIABLE EQUALS tupla .)
    RBRACE          reduce using rule 10 (declaracion -> VARIABLE EQUALS tupla .)


state 43

    (15) sentenciaIfElse -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE DOTCOMMA

    RPAREN          shift and go to state 57


state 44

    (19) condicion -> valor . operadorComp valor
    (8) expresion -> valor . operador valor
    (20) operadorComp -> . EQUALS
    (21) operadorComp -> . LANGLE
    (22) operadorComp -> . RANGLE
    (23) operadorComp -> . NEQ
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

    EQUALS          shift and go to state 59
    LANGLE          shift and go to state 60
    RANGLE          shift and go to state 61
    NEQ             shift and go to state 62
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

    operadorComp                   shift and go to state 58
    operador                       shift and go to state 20

state 45

    (17) estructuraList -> LIST LANGLE type . RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    RANGLE          shift and go to state 63


state 46

    (39) type -> INT .

    RANGLE          reduce using rule 39 (type -> INT .)


state 47

    (40) type -> STRING .

    RANGLE          reduce using rule 40 (type -> STRING .)


state 48

    (41) type -> BOOL .

    RANGLE          reduce using rule 41 (type -> BOOL .)


state 49

    (18) funcionVoid -> VOID VARIABLE LPAREN . valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (27) valores -> . valor
    (28) valores -> . valor COMMA valores
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valores                        shift and go to state 64
    valor                          shift and go to state 27
    expresion                      shift and go to state 29

state 50

    (11) impresion -> PRINT LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 65


state 51

    (25) impresion -> PRINT LPAREN RPAREN DOTCOMMA .

    $end            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)


state 52

    (12) impresion -> PRINT LPAREN expresion RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 66


state 53

    (13) impresion -> PRINT LPAREN DQUOTES expresion . DQUOTES RPAREN DOTCOMMA
    (37) valor -> expresion .

  ! shift/reduce conflict for DQUOTES resolved as shift
    DQUOTES         shift and go to state 67
    COMMA           reduce using rule 37 (valor -> expresion .)
    PLUS            reduce using rule 37 (valor -> expresion .)
    MINUS           reduce using rule 37 (valor -> expresion .)
    TIMES           reduce using rule 37 (valor -> expresion .)
    DIVIDE          reduce using rule 37 (valor -> expresion .)

  ! DQUOTES         [ reduce using rule 37 (valor -> expresion .) ]


state 54

    (14) impresion -> PRINT LPAREN DQUOTES valores . DQUOTES RPAREN DOTCOMMA

    DQUOTES         shift and go to state 68


state 55

    (8) expresion -> valor . operador valor
    (27) valores -> valor .
    (28) valores -> valor . COMMA valores
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

    DQUOTES         reduce using rule 27 (valores -> valor .)
    COMMA           shift and go to state 40
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

    operador                       shift and go to state 20

state 56

    (28) valores -> valor COMMA valores .

    RPAREN          reduce using rule 28 (valores -> valor COMMA valores .)
    DQUOTES         reduce using rule 28 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 28 (valores -> valor COMMA valores .)


state 57

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE DOTCOMMA

    LBRACE          shift and go to state 69


state 58

    (19) condicion -> valor operadorComp . valor
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valor                          shift and go to state 70
    expresion                      shift and go to state 29

state 59

    (20) operadorComp -> EQUALS .

    VARIABLE        reduce using rule 20 (operadorComp -> EQUALS .)
    INT             reduce using rule 20 (operadorComp -> EQUALS .)
    FLOAT           reduce using rule 20 (operadorComp -> EQUALS .)
    BOOL            reduce using rule 20 (operadorComp -> EQUALS .)
    NUMBER          reduce using rule 20 (operadorComp -> EQUALS .)


state 60

    (21) operadorComp -> LANGLE .

    VARIABLE        reduce using rule 21 (operadorComp -> LANGLE .)
    INT             reduce using rule 21 (operadorComp -> LANGLE .)
    FLOAT           reduce using rule 21 (operadorComp -> LANGLE .)
    BOOL            reduce using rule 21 (operadorComp -> LANGLE .)
    NUMBER          reduce using rule 21 (operadorComp -> LANGLE .)


state 61

    (22) operadorComp -> RANGLE .

    VARIABLE        reduce using rule 22 (operadorComp -> RANGLE .)
    INT             reduce using rule 22 (operadorComp -> RANGLE .)
    FLOAT           reduce using rule 22 (operadorComp -> RANGLE .)
    BOOL            reduce using rule 22 (operadorComp -> RANGLE .)
    NUMBER          reduce using rule 22 (operadorComp -> RANGLE .)


state 62

    (23) operadorComp -> NEQ .

    VARIABLE        reduce using rule 23 (operadorComp -> NEQ .)
    INT             reduce using rule 23 (operadorComp -> NEQ .)
    FLOAT           reduce using rule 23 (operadorComp -> NEQ .)
    BOOL            reduce using rule 23 (operadorComp -> NEQ .)
    NUMBER          reduce using rule 23 (operadorComp -> NEQ .)


state 63

    (17) estructuraList -> LIST LANGLE type RANGLE . VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        shift and go to state 71


state 64

    (18) funcionVoid -> VOID VARIABLE LPAREN valores . RPAREN LBRACE cuerpo RBRACE DOTCOMMA

    RPAREN          shift and go to state 72


state 65

    (11) impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .

    $end            reduce using rule 11 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 11 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)


state 66

    (12) impresion -> PRINT LPAREN expresion RPAREN DOTCOMMA .

    $end            reduce using rule 12 (impresion -> PRINT LPAREN expresion RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 12 (impresion -> PRINT LPAREN expresion RPAREN DOTCOMMA .)


state 67

    (13) impresion -> PRINT LPAREN DQUOTES expresion DQUOTES . RPAREN DOTCOMMA

    RPAREN          shift and go to state 73


state 68

    (14) impresion -> PRINT LPAREN DQUOTES valores DQUOTES . RPAREN DOTCOMMA

    RPAREN          shift and go to state 74


state 69

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE DOTCOMMA
    (1) cuerpo -> . expresion
    (2) cuerpo -> . impresion
    (3) cuerpo -> . tupla
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . sentenciaIfElse
    (6) cuerpo -> . estructuraList
    (7) cuerpo -> . funcionVoid
    (8) expresion -> . valor operador valor
    (11) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (12) impresion -> . PRINT LPAREN expresion RPAREN DOTCOMMA
    (13) impresion -> . PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> . PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (26) impresion -> .
    (24) tupla -> . LPAREN valores RPAREN
    (9) declaracion -> . VARIABLE EQUALS valor
    (10) declaracion -> . VARIABLE EQUALS tupla
    (15) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (17) estructuraList -> . LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (18) funcionVoid -> . VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER

    PRINT           shift and go to state 10
    RBRACE          reduce using rule 26 (impresion -> .)
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    IF              shift and go to state 13
    LIST            shift and go to state 14
    VOID            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    cuerpo                         shift and go to state 75
    expresion                      shift and go to state 2
    impresion                      shift and go to state 3
    tupla                          shift and go to state 4
    declaracion                    shift and go to state 5
    sentenciaIfElse                shift and go to state 6
    estructuraList                 shift and go to state 7
    funcionVoid                    shift and go to state 8
    valor                          shift and go to state 9

state 70

    (19) condicion -> valor operadorComp valor .
    (8) expresion -> valor . operador valor
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . TIMES
    (32) operador -> . DIVIDE

    RPAREN          reduce using rule 19 (condicion -> valor operadorComp valor .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

    operador                       shift and go to state 20

state 71

    (17) estructuraList -> LIST LANGLE type RANGLE VARIABLE . EQUALS LBRACKET valores RBRACKET DOTCOMMA

    EQUALS          shift and go to state 76


state 72

    (18) funcionVoid -> VOID VARIABLE LPAREN valores RPAREN . LBRACE cuerpo RBRACE DOTCOMMA

    LBRACE          shift and go to state 77


state 73

    (13) impresion -> PRINT LPAREN DQUOTES expresion DQUOTES RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 78


state 74

    (14) impresion -> PRINT LPAREN DQUOTES valores DQUOTES RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 79


state 75

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE DOTCOMMA

    RBRACE          shift and go to state 80


state 76

    (17) estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS . LBRACKET valores RBRACKET DOTCOMMA

    LBRACKET        shift and go to state 81


state 77

    (18) funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE . cuerpo RBRACE DOTCOMMA
    (1) cuerpo -> . expresion
    (2) cuerpo -> . impresion
    (3) cuerpo -> . tupla
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . sentenciaIfElse
    (6) cuerpo -> . estructuraList
    (7) cuerpo -> . funcionVoid
    (8) expresion -> . valor operador valor
    (11) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (12) impresion -> . PRINT LPAREN expresion RPAREN DOTCOMMA
    (13) impresion -> . PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> . PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (26) impresion -> .
    (24) tupla -> . LPAREN valores RPAREN
    (9) declaracion -> . VARIABLE EQUALS valor
    (10) declaracion -> . VARIABLE EQUALS tupla
    (15) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (17) estructuraList -> . LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (18) funcionVoid -> . VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER

    PRINT           shift and go to state 10
    RBRACE          reduce using rule 26 (impresion -> .)
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    IF              shift and go to state 13
    LIST            shift and go to state 14
    VOID            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    cuerpo                         shift and go to state 82
    expresion                      shift and go to state 2
    impresion                      shift and go to state 3
    tupla                          shift and go to state 4
    declaracion                    shift and go to state 5
    sentenciaIfElse                shift and go to state 6
    estructuraList                 shift and go to state 7
    funcionVoid                    shift and go to state 8
    valor                          shift and go to state 9

state 78

    (13) impresion -> PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA .

    $end            reduce using rule 13 (impresion -> PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 13 (impresion -> PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA .)


state 79

    (14) impresion -> PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA .

    $end            reduce using rule 14 (impresion -> PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 14 (impresion -> PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA .)


state 80

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE . ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE . DOTCOMMA

    ELSE            shift and go to state 83
    DOTCOMMA        shift and go to state 84


state 81

    (17) estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET . valores RBRACKET DOTCOMMA
    (27) valores -> . valor
    (28) valores -> . valor COMMA valores
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER
    (8) expresion -> . valor operador valor

    VARIABLE        shift and go to state 28
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    valores                        shift and go to state 85
    valor                          shift and go to state 27
    expresion                      shift and go to state 29

state 82

    (18) funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo . RBRACE DOTCOMMA

    RBRACE          shift and go to state 86


state 83

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE . LBRACE cuerpo RBRACE DOTCOMMA

    LBRACE          shift and go to state 87


state 84

    (16) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA .

    $end            reduce using rule 16 (sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 16 (sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA .)


state 85

    (17) estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores . RBRACKET DOTCOMMA

    RBRACKET        shift and go to state 88


state 86

    (18) funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 89


state 87

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE . cuerpo RBRACE DOTCOMMA
    (1) cuerpo -> . expresion
    (2) cuerpo -> . impresion
    (3) cuerpo -> . tupla
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . sentenciaIfElse
    (6) cuerpo -> . estructuraList
    (7) cuerpo -> . funcionVoid
    (8) expresion -> . valor operador valor
    (11) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (12) impresion -> . PRINT LPAREN expresion RPAREN DOTCOMMA
    (13) impresion -> . PRINT LPAREN DQUOTES expresion DQUOTES RPAREN DOTCOMMA
    (14) impresion -> . PRINT LPAREN DQUOTES valores DQUOTES RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (26) impresion -> .
    (24) tupla -> . LPAREN valores RPAREN
    (9) declaracion -> . VARIABLE EQUALS valor
    (10) declaracion -> . VARIABLE EQUALS tupla
    (15) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA
    (16) sentenciaIfElse -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (17) estructuraList -> . LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (18) funcionVoid -> . VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA
    (33) valor -> . VARIABLE
    (34) valor -> . INT
    (35) valor -> . FLOAT
    (36) valor -> . BOOL
    (37) valor -> . expresion
    (38) valor -> . NUMBER

    PRINT           shift and go to state 10
    RBRACE          reduce using rule 26 (impresion -> .)
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    IF              shift and go to state 13
    LIST            shift and go to state 14
    VOID            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    NUMBER          shift and go to state 19

    cuerpo                         shift and go to state 90
    expresion                      shift and go to state 2
    impresion                      shift and go to state 3
    tupla                          shift and go to state 4
    declaracion                    shift and go to state 5
    sentenciaIfElse                shift and go to state 6
    estructuraList                 shift and go to state 7
    funcionVoid                    shift and go to state 8
    valor                          shift and go to state 9

state 88

    (17) estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET . DOTCOMMA

    DOTCOMMA        shift and go to state 91


state 89

    (18) funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA .

    $end            reduce using rule 18 (funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 18 (funcionVoid -> VOID VARIABLE LPAREN valores RPAREN LBRACE cuerpo RBRACE DOTCOMMA .)


state 90

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo . RBRACE DOTCOMMA

    RBRACE          shift and go to state 92


state 91

    (17) estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .

    $end            reduce using rule 17 (estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    RBRACE          reduce using rule 17 (estructuraList -> LIST LANGLE type RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)


state 92

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 93


state 93

    (15) sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA .

    $end            reduce using rule 15 (sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 15 (sentenciaIfElse -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE ELSE LBRACE cuerpo RBRACE DOTCOMMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for DQUOTES in state 53 resolved as shift
